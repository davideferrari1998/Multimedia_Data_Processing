#pragma once

#include <vector>
#include <string>
#include <iostream>
#include <fstream>

//Creo raw_read e raw_write

template<typename T>
std::istream& raw_read(std::istream& is, T& num, size_t size = sizeof(T)) {

	return is.read(reinterpret_cast<char*>(&num), size);

}
template<typename T>
std::ostream& raw_write(std::ostream& os, const T& num, size_t size = sizeof(T)) {

	return os.write(reinterpret_cast<const char*>(&num), size);

}

struct triplet {
	uint8_t sym;
	uint8_t len = 0;
	uint32_t code = 0;
};

class hufstr {

	std::vector<triplet> huff_code;

public:
	hufstr() {

		/*std::ifstream is("table.bin", std::ios::binary);
		if (!is) {
			std::cout << "Errore nell'apertura di table.bin";
			return;
		}

		triplet t;

		for (int i = 0; i < 256; ++i) {
			raw_read(is, t.sym);
			raw_read(is, t.len);
			raw_read(is, t.code);
			huff_code.push_back(t);
		}*/

		huff_code = {	{ 32, 3, 0},
						{ 101, 3, 1},
						{ 97, 4, 4},
						{ 105, 4, 5},
						{ 108, 4, 6},
						{ 110, 4, 7},
						{ 111, 4, 8},
						{ 114, 4, 9},
						{ 99, 5, 20},
						{ 100, 5, 21},
						{ 115, 5, 22},
						{ 116, 5, 23},
						{ 117, 5, 24},
						{ 39, 6, 50},
						{ 44, 6, 51},
						{ 103, 6, 52},
						{ 109, 6, 53},
						{ 112, 6, 54},
						{ 118, 6, 55},
						{ 9, 7, 112},
						{ 10, 7, 113},
						{ 13, 7, 114},
						{ 46, 7, 115},
						{ 91, 7, 116},
						{ 93, 7, 117},
						{ 98, 7, 118},
						{ 102, 7, 119},
						{ 104, 7, 120},
						{ 34, 8, 242},
						{ 49, 8, 243},
						{ 83, 8, 244},
						{ 113, 8, 245},
						{ 122, 8, 246},
						{ 50, 9, 494},
						{ 51, 9, 495},
						{ 58, 9, 496},
						{ 59, 9, 497},
						{ 65, 9, 498},
						{ 68, 9, 499},
						{ 69, 9, 500},
						{ 71, 9, 501},
						{ 73, 9, 502},
						{ 48, 10, 1006},
						{ 52, 10, 1007},
						{ 53, 10, 1008},
						{ 54, 10, 1009},
						{ 55, 10, 1010},
						{ 56, 10, 1011},
						{ 57, 10, 1012},
						{ 63, 10, 1013},
						{ 67, 10, 1014},
						{ 76, 10, 1015},
						{ 77, 10, 1016},
						{ 78, 10, 1017},
						{ 80, 10, 1018},
						{ 33, 11, 2038},
						{ 66, 11, 2039},
						{ 70, 11, 2040},
						{ 79, 11, 2041},
						{ 81, 11, 2042},
						{ 82, 11, 2043},
						{ 84, 11, 2044},
						{ 45, 12, 4090},
						{ 86, 12, 4091},
						{ 107, 12, 4092},
						{ 40, 13, 8186},
						{ 41, 13, 8187},
						{ 72, 13, 8188},
						{ 85, 13, 8189},
						{ 90, 13, 8190},
						{ 75, 14, 16382},
						{ 47, 17, 131064},
						{ 119, 18, 262130},
						{ 64, 19, 524262},
						{ 74, 19, 524263},
						{ 88, 20, 1048528},
						{ 120, 20, 1048529},
						{ 87, 21, 2097060},
						{ 94, 21, 2097061},
						{ 106, 21, 2097062},
						{ 121, 21, 2097063},
						{ 21, 22, 4194148},
						{ 22, 22, 4194149},
						{ 23, 22, 4194150},
						{ 24, 22, 4194151},
						{ 25, 22, 4194152},
						{ 26, 22, 4194153},
						{ 27, 22, 4194154},
						{ 28, 22, 4194155},
						{ 29, 22, 4194156},
						{ 30, 22, 4194157},
						{ 31, 22, 4194158},
						{ 35, 22, 4194159},
						{ 36, 22, 4194160},
						{ 37, 22, 4194161},
						{ 38, 22, 4194162},
						{ 42, 22, 4194163},
						{ 43, 22, 4194164},
						{ 60, 22, 4194165},
						{ 61, 22, 4194166},
						{ 62, 22, 4194167},
						{ 89, 22, 4194168},
						{ 92, 22, 4194169},
						{ 95, 22, 4194170},
						{ 96, 22, 4194171},
						{ 123, 22, 4194172},
						{ 124, 22, 4194173 },
						{ 126, 22, 4194174 },
						{ 127, 22, 4194175 },
						{ 128, 22, 4194176 },
						{ 129, 22, 4194177 },
						{ 130, 22, 4194178 },
						{ 131, 22, 4194179 },
						{ 132, 22, 4194180 },
						{ 133, 22, 4194181 },
						{ 134, 22, 4194182 },
						{ 135, 22, 4194183 },
						{ 136, 22, 4194184 },
						{ 137, 22, 4194185 },
						{ 138, 22, 4194186 },
						{ 139, 22, 4194187 },
						{ 140, 22, 4194188 },
						{ 141, 22, 4194189 },
						{ 142, 22, 4194190 },
						{ 143, 22, 4194191 },
						{ 144, 22, 4194192 },
						{ 145, 22, 4194193 },
						{ 146, 22, 4194194 },
						{ 147, 22, 4194195 },
						{ 148, 22, 4194196 },
						{ 149, 22, 4194197 },
						{ 150, 22, 4194198 },
						{ 151, 22, 4194199 },
						{ 152, 22, 4194200 },
						{ 153, 22, 4194201 },
						{ 154, 22, 4194202 },
						{ 155, 22, 4194203 },
						{ 156, 22, 4194204 },
						{ 157, 22, 4194205 },
						{ 158, 22, 4194206 },
						{ 159, 22, 4194207 },
						{ 160, 22, 4194208 },
						{ 161, 22, 4194209 },
						{ 162, 22, 4194210 },
						{ 163, 22, 4194211 },
						{ 164, 22, 4194212 },
						{ 165, 22, 4194213 },
						{ 166, 22, 4194214 },
						{ 167, 22, 4194215 },
						{ 168, 22, 4194216 },
						{ 169, 22, 4194217 },
						{ 170, 22, 4194218 },
						{ 171, 22, 4194219 },
						{ 172, 22, 4194220 },
						{ 173, 22, 4194221 },
						{ 174, 22, 4194222 },
						{ 175, 22, 4194223 },
						{ 176, 22, 4194224 },
						{ 177, 22, 4194225 },
						{ 178, 22, 4194226 },
						{ 179, 22, 4194227 },
						{ 180, 22, 4194228 },
						{ 181, 22, 4194229 },
						{ 182, 22, 4194230 },
						{ 183, 22, 4194231 },
						{ 184, 22, 4194232 },
						{ 185, 22, 4194233 },
						{ 186, 22, 4194234 },
						{ 187, 22, 4194235 },
						{ 188, 22, 4194236 },
						{ 189, 22, 4194237 },
						{ 190, 22, 4194238 },
						{ 191, 22, 4194239 },
						{ 192, 22, 4194240 },
						{ 193, 22, 4194241 },
						{ 194, 22, 4194242 },
						{ 195, 22, 4194243 },
						{ 196, 22, 4194244 },
						{ 197, 22, 4194245 },
						{ 198, 22, 4194246 },
						{ 199, 22, 4194247 },
						{ 200, 22, 4194248 },
						{ 201, 22, 4194249 },
						{ 202, 22, 4194250 },
						{ 203, 22, 4194251 },
						{ 204, 22, 4194252 },
						{ 205, 22, 4194253 },
						{ 206, 22, 4194254 },
						{ 207, 22, 4194255 },
						{ 208, 22, 4194256 },
						{ 209, 22, 4194257 },
						{ 210, 22, 4194258 },
						{ 211, 22, 4194259 },
						{ 212, 22, 4194260 },
						{ 213, 22, 4194261 },
						{ 214, 22, 4194262 },
						{ 215, 22, 4194263 },
						{ 216, 22, 4194264 },
						{ 217, 22, 4194265 },
						{ 218, 22, 4194266 },
						{ 219, 22, 4194267 },
						{ 220, 22, 4194268 },
						{ 221, 22, 4194269 },
						{ 222, 22, 4194270 },
						{ 223, 22, 4194271 },
						{ 224, 22, 4194272 },
						{ 225, 22, 4194273 },
						{ 226, 22, 4194274 },
						{ 227, 22, 4194275 },
						{ 228, 22, 4194276 },
						{ 229, 22, 4194277 },
						{ 230, 22, 4194278 },
						{ 231, 22, 4194279 },
						{ 232, 22, 4194280 },
						{ 233, 22, 4194281 },
						{ 234, 22, 4194282 },
						{ 235, 22, 4194283 },
						{ 236, 22, 4194284 },
						{ 237, 22, 4194285 },
						{ 238, 22, 4194286 },
						{ 239, 22, 4194287 },
						{ 240, 22, 4194288 },
						{ 241, 22, 4194289 },
						{ 242, 22, 4194290 },
						{ 243, 22, 4194291 },
						{ 244, 22, 4194292 },
						{ 245, 22, 4194293 },
						{ 246, 22, 4194294 },
						{ 247, 22, 4194295 },
						{ 248, 22, 4194296 },
						{ 249, 22, 4194297 },
						{ 250, 22, 4194298 },
						{ 251, 22, 4194299 },
						{ 252, 22, 4194300 },
						{ 253, 22, 4194301 },
						{ 254, 22, 4194302 },
						{ 255, 22, 4194303 }

		};

	}
    std::vector<uint8_t> compress(const std::string& s) const;
    std::string decompress(const std::vector<uint8_t>& v) const;
};

//Creo la classe bitreader e bitwriter

class bitreader {

	std::istream& is_;
	uint8_t buffer_;
	size_t nbits_;

	uint32_t readbit() {

		if (nbits_ == 0) {
			raw_read(is_, buffer_);
			nbits_ = 8;
		}
		nbits_--;
		return (buffer_ >> nbits_) & 1;
	}

public:
	bitreader(std::istream& is) : is_(is), nbits_(0) {}

	std::istream& read(uint32_t& u, size_t n) {

		u = 0;
		while (n-- > 0) {
			u = (u << 1) | readbit();
		}
		return is_;
	}

};

class bitwriter {

	std::ostream& os_;
	uint8_t buffer_;
	size_t nbits_;

	std::ostream& writebit(uint32_t u) {

		buffer_ = (buffer_ << 1) | (u & 1);
		nbits_++;
		if (nbits_ == 8) {
			raw_write(os_, buffer_);
			nbits_ = 0;
		}
		return os_;

	}

public:
	bitwriter(std::ostream& os) : os_(os), nbits_(0) {}
	~bitwriter()
	{
		flush();
	}

	//FLUSH DI 1 SE SERVE
	void flush(uint32_t u = 1) {
		while (nbits_ > 0) {
			writebit(u);
		}
	}

	std::ostream& write(uint32_t u, size_t n) {
		while (n-- > 0) {
			writebit(u >> n);
		}
		return os_;
	}

};